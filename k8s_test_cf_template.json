{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "k8s testing",
    "Metadata": {

    },
    "Parameters": {
        
        "keyName": {
            "Description": "SSH Key name",
            "Type": "String",
            "Default": "ben@SFLaptop - eu-west-1"
        },
        
        "imageId": {
            "Description": "AMI",
            "Type": "String",
            "Default": "ami-3548444c"
        },

        
        "masterSize": {
            "Description": "Size of instance for masters",
            "Type": "String",
            "Default": "t3.medium"
        },

        "apiDnsHostName": {
            "Description": "hostname for api endpoint",
            "Type": "String",
            "Default": "k8sapi"
        },

        "apiDnsDomainName": {
            "Description": "Zone for api endpoint",
            "Type": "String",
            "Default": "test.sf.rudemechanical.co.uk"
        }
        
    },
    "Mappings": {

    },
    "Conditions": {

    },
    "Resources": {
            "vpck8s": {
              "Type": "AWS::EC2::VPC",
              "Properties": {
                "CidrBlock": "172.20.0.0/16",
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Purpose",
                        "Value": "k8s testing"
                    }
                ]
              }
            },

            
            "igwk8s": {
              "Type": "AWS::EC2::InternetGateway",
              "Properties": {
                "Tags": [
                    {
                        "Key": "Purpose",
                        "Value": "k8s testing"
                    }
                ]
              }
            },
            "gwak8s": {
              "Type": "AWS::EC2::VPCGatewayAttachment",
              "Properties": {
                "VpcId": { "Ref": "vpck8s" },
                "InternetGatewayId": { "Ref": "igwk8s" }
              }
            },
            
            
            "subnetk8s1": {
              "Type": "AWS::EC2::Subnet",
              "Properties": {
                "AvailabilityZone": "eu-west-1a",
                "VpcId": { "Ref": "vpck8s" },                
                "CidrBlock": "172.20.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags":[
                    { "Key": "Purpose", "Value":  "k8s testing" }
                ]
              }
            },
            "rtvpck8s": {
              "Type": "AWS::EC2::RouteTable",
              "Properties": {
                "VpcId": { "Ref": "vpck8s"},
                "Tags":[
                    { "Key": "Purpose", "Value":  "k8s testing" }
                ]
              }
            },
            
            "routeTableAssocName": {
              "Type": "AWS::EC2::SubnetRouteTableAssociation",
              "Properties": {
                "SubnetId": { "Ref": "subnetk8s1" },
                "RouteTableId": { "Ref": "rtvpck8s" }               
              }
            },
            
            "rtk8sdefault": {
              "Type": "AWS::EC2::Route",
              "Properties": {
                "RouteTableId": { "Ref": "rtvpck8s" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "igwk8s" }
              }
            },
            
            
            
            "sgk8smasters" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "GroupDescription" : "SG for k8s masters",
                "SecurityGroupIngress" : [ 
                    {
                        "CidrIp" : "0.0.0.0/0",
                        "Description" : "Allow anyone to shell in!",
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22"
                      },
                      {
                          "CidrIp" : "0.0.0.0/0",
                          "Description" : "Allow anyone to hit the kube api!",
                          "IpProtocol" : "tcp",
                          "FromPort" : "6443",
                          "ToPort" : "6443"
                        }
                ],
                "VpcId" : { "Ref": "vpck8s" },
                "Tags":[
                    { "Key": "Purpose", "Value":  "k8s testing" }
                ]
              }
            },
            
            
            "ec2k8smaster1": {
                "Type": "AWS::EC2::Instance",
                "Properties": {
                    "KeyName": { "Ref": "keyName" },
                    "ImageId": { "Ref": "imageId" },
                    "InstanceType": { "Ref": "masterSize" },
                    "Monitoring": "true",
                    "SubnetId": { "Ref": "subnetk8s1" },                    
                    "SecurityGroupIds" : [
                        
                        { "Ref": "sgk8smasters" }
                        
                    ],
                    "Tags":[
                        { "Key": "Purpose", "Value":  "k8s testing" }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "#!/bin/bash -ex",
                                    "cat <<EOF > /etc/yum.repos.d/kubernetes.repo",
                                    "[kubernetes]",
                                    "baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64",
                                    "name=Kubernetes",
                                    "enabled=1",
                                    "gpgcheck=1",
                                    "repo_gpgcheck=1",
                                    "gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
                                    "exclude=kube*",
                                    "EOF",
                                    "",
                                    "# Set SELinux in permissive mode (effectively disabling it)",
                                    "setenforce 0",
                                    "sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config",
                                    "",
                                    "yum install -y docker kubelet kubeadm kubectl --disableexcludes=kubernetes",
                                    "",
                                    "systemctl enable docker && systemctl start docker",
                                    "systemctl enable kubelet && systemctl start kubelet",
                                    "",
                                    "cat <<EOF >  /etc/sysctl.d/k8s.conf",
                                    "net.bridge.bridge-nf-call-ip6tables = 1",
                                    "net.bridge.bridge-nf-call-iptables = 1",
                                    "EOF",
                                    "sysctl --system",
                                    "",
                                    "kubeadm init\\",
                                    { "Fn::Sub": "  --apiserver-cert-extra-sans ${apiDnsHostName}.${apiDnsDomainName}"},
                                    "mkdir -p /home/centos/.kube",
                                    {
                                        "Fn::Sub":
                                            "sed -E 's#(server: [a-z]+://)[^:]+(:[0-9]+)#\\1${apiDnsHostName}.${apiDnsDomainName}\\2#' /etc/kubernetes/admin.conf > /home/centos/.kube/config"
                                    },
                                    "chown -R centos:centos /home/centos/.kube/config"
                                ]
                            ]
                        }
                    }
                }
            },

            
            "r53k8sapi": {
                "Type": "AWS::Route53::RecordSet",
                "Properties": {
                    "Name": {
                        "Fn::Sub": "${apiDnsHostName}.${apiDnsDomainName}"
                    },
                    "Type": "CNAME",
                    "HostedZoneName": {
                        "Fn::Sub": "${apiDnsDomainName}."
                    },
                    "ResourceRecords": [ {
                        "Fn::GetAtt" : ["ec2k8smaster1", "PublicDnsName"]
                    } ],
                    "TTL": "60"
                }
            }
            
            

    },
    "Outputs": {

        
        "k8smasterDNS" : {
          "Value" : { "Fn::GetAtt" : [ "ec2k8smaster1", "PublicDnsName" ] }
        },
        "k8sMasterAPIDNS" : {
            "Value" : {
                "Fn::Sub": "${apiDnsHostName}.${apiDnsDomainName}"
            }
        }
        

    }
}